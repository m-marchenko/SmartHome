@using SmartHome.Models.DataContracts;
@model RootUnit
@{
    ViewBag.Title = Model.DisplayName;
}
<div class="row">


    <div class="panel-group" id="accordion">
        <div class="panel panel-primary">
            <div class="panel-heading"><h4>@Model.DisplayName </h4></div>
        </div>

        @{
            foreach (var s in Model.Units)
            {
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            <a name="@s.Name" data-toggle="collapse" data-parent="#accordion" href="#@s.ClientId">@s.DisplayName</a>                                                                                        
                        </h4>
                    </div>
                    <div id="@s.ClientId" class="panel-collapse collapse">
                        <div class="panel-body">
                            @Html.Partial("CompositeObject", s)
                        </div>
                    </div>
                </div>

            }
        }

    </div>

</div>

@section scripts {
    <script type="text/javascript">

        // Create a client instance
        //client = new Paho.MQTT.Client("host", port, "client_id");
        //client = new Paho.MQTT.Client("m10.cloudmqtt.com", 36425, "web_1234567"/* + parseInt(Math.random() * 100, 10) */);
        client = new Paho.MQTT.Client("m10.cloudmqtt.com", 36425, "web_" + parseInt(Math.random() * 100, 10) );
        //Example client = new Paho.MQTT.Client("m11.cloudmqtt.com", 32903, "web_" + parseInt(Math.random() * 100, 10));

        reconnect();

        // called when the client connects
        function onConnect() {
            // Once a connection has been made, make a subscription and send a message.
            //debugger;

            $("#msg").text("Connected to MQTT server");
            //client.subscribe("sensor/root/#");
            client.subscribe("sensor");
        }

        function doFail(e) {
            //console.log(e);
            //debugger;
            $("#msg").text("Shit happens - " + e.errorMessage);
        }

        // called when the client loses its connection
        function onConnectionLost(responseObject) {
            //debugger;
            if (responseObject.errorCode !== 0) {
                //console.log("onConnectionLost:" + responseObject.errorMessage);
                $("#msg").text("Connection lost");
            }
            
            reconnect();
        }

        function reconnect() {

            // set callback handlers
            client.onConnectionLost = onConnectionLost;
            client.onMessageArrived = onMessageArrived;
            var options = {
                cleanSession: false,
                keepAliveInterval: 6000,
                useSSL: true,
                userName: "quefkobd",
                password: "524rVRkbylHl",
                onSuccess: onConnect,
                onFailure: doFail
            }

            // connect the client
            client.connect(options);
        }

        // called when a message arrives
        function onMessageArrived(message) {            
            //debugger;
            var dest = message.destinationName;
            var ctrl = dest.replace(/\//g, "_")

            var msg = JSON.parse(message.payloadString);

            //$("#" + msg.ClientId).text(msg.Value);
            $("#" + msg.clientid).replaceWith("<tr id='" + msg.clientid + "'><td>"+ msg.display + "</td><td>" + msg.value + "</td><td>" + msg.time + "</td></tr>");

            @*// здесь надо бы засинхронизировать состояние с сервером
            $.ajax({
                type: 'POST',
                url: '@Url.Action("SetSensorValue", "Command")',
                //url: '/api/Command/' + this.id + "/" + this.name,
                //url: '/api/Command/' + this.id,
                //dataType: "json",
                cache: false,
                contentType: "application/json",
                data: "{\"sensorId\":\"" + ctrl + "\", \"val\":\"" + message.payloadString + "\" }",

                success: function (data) {

                },

                error: function (data) {
                    debugger;
                    alert(data);
                }
            });*@


        }
        //
        //
        //

        var current = null;
        $(function () {
            $(".btn").click(function () {
                //debugger;
                //alert("event=" + "@Model.Id" + " , id=" + this.id + " unit=" + this.name);

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("SendCommand", "Command")',
                    //url: '/api/Command/' + this.id + "/" + this.name,
                    //url: '/api/Command/' + this.id,
                    //dataType: "json",
                    cache: false,
                    contentType: "application/json",
                    data: "{\"command\":\"" + this.id + "\", \"target\":\"" + this.name + "\" }",

                    success: function (data) {

                    },

                    error: function (data) {
                        debugger;
                        alert(data);
                    }
                });

            });

            $("a").click(function () { current = this.name; });

        @*$("#refresh").click(function () {
            //debugger;
            if (current != null) {
                //alert("refreshing " + current);

                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("Refresh")/' + current,
                    cache: false,
                    beforeSend: function () {
                        //$("#mbbusy").show();
                    },
                    complete: function () {
                        //$("#mbbusy").hide();
                    },

                    success: function (data) {
                        //debugger;
                        //alert(data);
                        // заменяем содержимое присланным частичным представлением
                        $('#'+current).replaceWith(data);
                        //alert($(".mbselect").length);
                    },
                    error: function (err) {
                        //debugger;
                    }
                });

            }
        });*@
    });

        function refreshObject(clientid) {

            //alert(clientid);

            $.ajax({
                type: 'GET',
                url: '@Url.Action("Refresh")/' + clientid,
                cache: false,
                beforeSend: function () {
                    //$("#mbbusy").show();
                },
                complete: function () {
                    //$("#mbbusy").hide();
                },

                success: function (data) {
                    //debugger;
                    //alert(data);
                    // заменяем содержимое присланным частичным представлением
                    $('#sensorsU_' + clientid).replaceWith(data);
                    //alert($(".mbselect").length);
                },
                error: function (err) {
                    //debugger;
                }
            });

        }
    </script>
}